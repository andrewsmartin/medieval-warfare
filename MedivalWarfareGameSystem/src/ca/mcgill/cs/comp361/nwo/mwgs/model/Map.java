package ca.mcgill.cs.comp361.nwo.mwgs.model;



/**
 * Map class definition.
 * Generated by the TouchCORE code generator.
 */
public class Map {
    
    private int width;
    private int height;
    private int totalTiles;
    private HashMap<int, Tile> tiles;
    
    public Map(List<Tile> tiles, int width, int height) {
        /* TODO: No message view defined */
    }

    public List<Tile> getTilesWithTombstones() {
        /* TODO: No message view defined */
        return null;
    }

    public List<Village> getVillages() {
        /* TODO: No message view defined */
        return null;
    }

    public List<Tile> getTilesWithTrees() {
        /* TODO: No message view defined */
        return null;
    }

    public List<Tile> getTiles() {
        /* TODO: No message view defined */
        return null;
    }

    public void setTiles(List<Tile> tiles) {
        Tile put;
        for (for each Tile t in tiles) {
            put = tiles.put(,);
        }
    }

    public static Map setUpMap(ArrayList<Player> players, String jsonMap) {
        Village village;
        Map map;
        List<Tile> parsedTiles;
        parsedTiles = JsonMapParser.parseTiles(jsonMap);
        for (int i = 1 to tiles.size()) {
            This loop randomly places an equal number of villages for each player then creates a randomly sized region around the village;
            The parameters used below are not what they will be in implementation, there will be more logic to select players and tiles;
            village = new Village();
            village.setControlledBy();
            region = new Region();
            region.setVillage(village);
            region.addTile();
        }
        map = new Map(parsedTiles);
        return map;
    }

    public void replaceTombstonesWithTrees(Player player) {
        Player controllingPlayer;
        Tile tile;
        for (for int i = 0 to (height * width - 1)) {
            tile = tiles.get(0);
            controllingPlayer = tile.getControllingPlayer();
            if (player == controllingPlayer) {
                tile.setStructure();
                tile.setTerrainType();
            }
        }
    }

    public void growNewTrees() {
        /* TODO: No message view defined */
    }

    public Tile getTile(int x, int y) {
        Tile tile;
        The get statement uses the key k = y * width + x;
        tile = tiles.get(0);
        return tile;
    }

    public int getWidth() {
        /* TODO: No message view defined */
        return 0;
    }

    public int getHeight() {
        /* TODO: No message view defined */
        return 0;
    }
}
